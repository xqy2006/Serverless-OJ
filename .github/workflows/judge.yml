name: OJ Judge

on:
  issues:
    types: [opened]

jobs:
  judge:
    runs-on: windows-latest
    if: contains(github.event.issue.title, '评测')
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
          
      - name: Install dependencies
        run: |
          pip install cryptography psutil
          
      - name: Decrypt and Judge
        id: judge
        env:
          PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_CREATOR: ${{ github.event.issue.user.login }}
        shell: powershell
        run: |
          # 解析题目名称
          $PROBLEM_NAME = "${{ github.event.issue.title }}" -replace '评测',''
          
          # 保存私钥
          $env:PRIVATE_KEY | Out-File -Encoding utf8 private.pem
          
          # 解密提交的代码
          [System.Convert]::FromBase64String("${{ github.event.issue.body }}") | Set-Content -Path encrypted_code -AsByteStream
          
          python -c "
          from cryptography.hazmat.primitives import serialization
          from cryptography.hazmat.primitives.asymmetric import padding
          from cryptography.hazmat.primitives import hashes
          from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
          from cryptography.hazmat.backends import default_backend
          import base64
          import os
          
          with open('private.pem', 'rb') as f:
              private_key = serialization.load_pem_private_key(f.read(), password=None)
          
          with open('encrypted_code', 'rb') as f:
              encrypted_data = f.read()
          
          encrypted_key = encrypted_data[:256]
          iv = encrypted_data[256:272]
          encrypted_content = encrypted_data[272:]
          
          aes_key = private_key.decrypt(
              encrypted_key,
              padding.OAEP(
                  mgf=padding.MGF1(algorithm=hashes.SHA256()),
                  algorithm=hashes.SHA256(),
                  label=None
              )
          )
          
          cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
          decryptor = cipher.decryptor()
          decrypted_padded = decryptor.update(encrypted_content) + decryptor.finalize()
          
          pad_length = decrypted_padded[-1]
          decrypted = decrypted_padded[:-pad_length]
          
          content = decrypted.decode('utf-8')
          username, lang, code = content.split('\n', 2)
          
          issue_creator = os.environ['ISSUE_CREATOR']
          if username.strip() != issue_creator:
              with open('judge_result.txt', 'w') as f:
                  f.write('CHEATING')
          else:
              with open('solution.cpp', 'wb') as f:
                  f.write(code.encode('utf-8'))
              with open('lang.txt', 'w') as f:
                  f.write(lang.strip())
              with open('judge_result.txt', 'w') as f:
                  f.write('OK')
          "
          
          # 检查判定结果
          $JUDGE_RESULT = Get-Content -Path judge_result.txt -Raw
          
          if ($JUDGE_RESULT -eq "CHEATING") {
            # 创建作弊标签
            gh label create "CHEATING" --color "ff0000" 2>&1 | Out-Null
            
            # 添加作弊标签和回复
            gh issue edit ${{ github.event.issue.number }} --add-label "CHEATING"
            gh issue comment ${{ github.event.issue.number }} --body "检测到代码抄袭行为！"
            gh issue close ${{ github.event.issue.number }}
          } else {
            # 处理 list.txt，移除 \r\n
            (Get-Content ./problems/list.txt) | ForEach-Object { $_ -replace "`r`n","`n" } | Set-Content ./problems/list.txt -NoNewline
            
            # 计算题目 ID
            $content = Get-Content ./problems/list.txt
            $ID = 0
            for($i=0; $i -lt $content.Length; $i++) {
              if($content[$i] -eq $PROBLEM_NAME) {
                $ID = $i + 1
                break
              }
            }
            
            if ($ID -eq 0) {
              Write-Error "题目不存在: $PROBLEM_NAME"
              exit 1
            }
            
            $LANG = Get-Content lang.txt
            # 运行评测
            $RESULT = python judge.py private.pem "problems/$ID" solution.cpp "$LANG"
            
            # 回复结果
            gh issue comment ${{ github.event.issue.number }} --body "$RESULT"
            
            # 获取状态
            $STATUS = Get-Content judge_status.txt
            
            # 创建标签函数
            function Create-LabelIfNotExists {
              param($label, $color)
              gh label list | Select-String "^$label\s" -Quiet
              if (-not $?) {
                gh label create "$label" --color "$color"
              }
            }
            
            # 为不同的标签设置不同的颜色
            Create-LabelIfNotExists "AC" "0e8a16"
            Create-LabelIfNotExists "MLE" "1e90ff"
            Create-LabelIfNotExists "WA" "d93f0b"
            Create-LabelIfNotExists "TLE" "ff69b4"
            Create-LabelIfNotExists "CE" "808080"
            
            # 添加标签
            gh issue edit ${{ github.event.issue.number }} --add-label "$STATUS"
            
            gh issue close ${{ github.event.issue.number }}
          }
